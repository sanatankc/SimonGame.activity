var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { add, now, remove } from './core';
import PlaybackPosition from './PlaybackPosition';
import Tween from './Tween';
import { EVENT_COMPLETE, EVENT_REPEAT, EVENT_REVERSE, EVENT_RESTART, EVENT_UPDATE, FRAME_MS, TOO_LONG_FRAME_MS } from './constants';
import Selector from './selector';
export var shuffle = function (a) {
    var j;
    var x;
    var i;
    for (i = a.length; i; i -= 1) {
        j = Math.floor(Math.random() * i);
        x = a[i - 1];
        a[i - 1] = a[j];
        a[j] = x;
    }
    return a;
};
var _id = 0;
/**
 * Timeline main constructor.
 *
 * It works same as `Tween` instance, using `.repeat`, `.restart` or `etc` works like a `Tween`, so please see `Tween` class for methods
 * @constructor
 * @class
 * @namespace TWEEN.Timeline
 * @param {Object=} params Default params for new tweens
 * @example let tl = new Timeline({delay:200})
 * @extends Tween
 * @deprecated
 */
var Timeline = /** @class */ (function (_super) {
    __extends(Timeline, _super);
    function Timeline(params) {
        var _this = _super.call(this) || this;
        _this._duration = 0;
        _this._startTime = now();
        _this._tweens = [];
        _this.elapsed = 0;
        _this._id = _id++;
        _this._defaultParams = params;
        _this.position = new PlaybackPosition();
        _this.position.addLabel('afterLast', _this._duration);
        _this.position.addLabel('afterInit', _this._startTime);
        return _this;
    }
    Timeline.prototype.mapTotal = function (fn) {
        fn.call(this, this._tweens);
        return this;
    };
    Timeline.prototype.timingOrder = function (fn) {
        var timing = fn(this._tweens.map(function (t) { return t._startTime; }));
        this._tweens.map(function (tween, i) {
            tween._startTime = timing[i];
        });
        return this;
    };
    Timeline.prototype.getTiming = function (mode, nodes, params, offset) {
        if (offset === void 0) { offset = 0; }
        if (mode === 'reverse') {
            var stagger_1 = params.stagger;
            var totalStagger_1 = (stagger_1 || 0) * (nodes.length - 1);
            return nodes.map(function (node, i) { return totalStagger_1 - (stagger_1 || 0) * i + offset; });
        }
        else if (mode === 'async') {
            return nodes.map(function (node) { return offset; });
        }
        else if (mode === 'sequence' || mode === 'delayed') {
            var stagger_2 = params.stagger;
            if (!stagger_2) {
                stagger_2 = (params.duration || 1000) / (nodes.length - 1);
            }
            return nodes.map(function (node, i) { return stagger_2 * i + offset; });
        }
        else if (mode === 'oneByOne') {
            return nodes.map(function (node) { return params.duration; });
        }
        else if (mode === 'shuffle') {
            var stagger_3 = params.stagger;
            return shuffle(nodes.map(function (node, i) { return (stagger_3 || 0) * i + offset; }));
        }
        else {
            var stagger_4 = params.stagger;
            return nodes.map(function (node, i) { return (stagger_4 || 0) * i + offset; });
        }
    };
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} from - Initial value
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example tl.fromTo(nodes, {x:0}, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    Timeline.prototype.fromTo = function (nodes, from, to, params) {
        nodes = Selector(nodes, true);
        if (nodes && nodes.length) {
            if (this._defaultParams) {
                params = __assign({}, this._defaultParams, params);
            }
            var position = params.label;
            var offset = typeof position === 'number'
                ? position
                : this.position.parseLabel(typeof position !== 'undefined' ? position : 'afterLast', null);
            var mode = this.getTiming(params.mode, nodes, params, offset);
            for (var i = 0, node = void 0, len = nodes.length; i < len; i++) {
                node = nodes[i];
                this.add(Tween.fromTo(node, typeof from === 'function' ? from(i, nodes.length) : typeof from === 'object' && !!from ? __assign({}, from) : null, typeof to === 'function' ? to(i, nodes.length) : to, typeof params === 'function' ? params(i, nodes.length) : params), mode[i]);
            }
        }
        return this.start();
    };
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} from - Initial value
     * @param {object} params - Options of tweens
     * @example tl.from(nodes, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    Timeline.prototype.from = function (nodes, from, params) {
        return this.fromTo(nodes, from, null, params);
    };
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example tl.to(nodes, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    Timeline.prototype.to = function (nodes, to, params) {
        return this.fromTo(nodes, null, to, params);
    };
    /**
     * Add label to Timeline
     * @param {string} name Label name
     * @param {any} offset Label value, can be `number` and/or `string`
     * @example tl.add('label1', 200)
     * @memberof Timeline
     */
    Timeline.prototype.addLabel = function (name, offset) {
        this.position.addLabel(name, offset);
        return this;
    };
    Timeline.prototype.map = function (fn) {
        for (var i = 0, len = this._tweens.length; i < len; i++) {
            var _tween = this._tweens[i];
            fn(_tween, i);
            this._duration = Math.max(this._duration, _tween._duration + _tween._startTime);
        }
        return this;
    };
    /**
     * Add tween to Timeline
     * @param {Tween} tween Tween instance
     * @param {position} position Can be label name, number or relative number to label
     * @example tl.add(new Tween(node, {x:0}).to({x:200}, 200))
     * @memberof Timeline
     */
    Timeline.prototype.add = function (tween, position) {
        var _this = this;
        if (Array.isArray(tween)) {
            tween.map(function (_tween) {
                _this.add(_tween, position);
            });
            return this;
        }
        else if (typeof tween === 'object' && !(tween instanceof Tween)) {
            tween = new Tween(tween.from).to(tween.to, tween);
        }
        var _a = this, _defaultParams = _a._defaultParams, _duration = _a._duration;
        if (_defaultParams) {
            for (var method in _defaultParams) {
                if (typeof tween[method] === 'function') {
                    tween[method](_defaultParams[method]);
                }
            }
        }
        var offset = typeof position === 'number'
            ? position
            : this.position.parseLabel(typeof position !== 'undefined' ? position : 'afterLast', null);
        tween._startTime = Math.max(this._startTime, tween._delayTime, offset);
        tween._delayTime = offset;
        tween._isPlaying = true;
        this._duration = Math.max(_duration, tween._startTime + tween._delayTime + tween._duration);
        this._tweens.push(tween);
        this.position.setLabel('afterLast', this._duration);
        return this;
    };
    Timeline.prototype.restart = function () {
        this._startTime += now();
        add(this);
        return this.emit(EVENT_RESTART);
    };
    Timeline.prototype.easing = function (easing) {
        return this.map(function (tween) { return tween.easing(easing); });
    };
    Timeline.prototype.interpolation = function (interpolation) {
        return this.map(function (tween) { return tween.interpolation(interpolation); });
    };
    Timeline.prototype.update = function (time) {
        var _a = this, _tweens = _a._tweens, _duration = _a._duration, _reverseDelayTime = _a._reverseDelayTime, _startTime = _a._startTime, _reversed = _a._reversed, _yoyo = _a._yoyo, _repeat = _a._repeat, _isFinite = _a._isFinite, _isPlaying = _a._isPlaying, _prevTime = _a._prevTime;
        var delta = time - _prevTime;
        this._prevTime = time;
        if (delta > TOO_LONG_FRAME_MS) {
            time -= delta - FRAME_MS;
        }
        if (!_isPlaying || time < _startTime) {
            return true;
        }
        var elapsed = (time - _startTime) / _duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        elapsed = _reversed ? 1 - elapsed : elapsed;
        this.elapsed = elapsed;
        var timing = time - _startTime;
        var _timing = _reversed ? _duration - timing : timing;
        var i = 0;
        while (i < _tweens.length) {
            _tweens[i].update(_timing);
            i++;
        }
        this.emit(EVENT_UPDATE, elapsed, timing);
        if (elapsed === 1 || (_reversed && elapsed === 0)) {
            if (_repeat) {
                if (_isFinite) {
                    this._repeat--;
                }
                this.emit(_reversed ? EVENT_REVERSE : EVENT_REPEAT);
                if (_yoyo) {
                    this._reversed = !_reversed;
                    this.timingOrder(function (timing) { return timing.reverse(); });
                }
                if (_reversed && _reverseDelayTime) {
                    this._startTime = time + _reverseDelayTime;
                }
                else {
                    this._startTime = time;
                }
                i = 0;
                while (i < _tweens.length) {
                    _tweens[i].reassignValues(time);
                    i++;
                }
                return true;
            }
            else {
                this.emit(EVENT_COMPLETE);
                this._repeat = this._r;
                remove(this);
                this._isPlaying = false;
                return false;
            }
        }
        return true;
    };
    Timeline.prototype.progress = function (value) {
        return value !== undefined
            ? this.update(value * this._duration)
            : this.elapsed;
    };
    return Timeline;
}(Tween));
export default Timeline;
