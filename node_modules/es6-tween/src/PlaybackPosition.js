var PlaybackPosition = /** @class */ (function () {
    function PlaybackPosition() {
        this.totalTime = 0;
        this.labels = [];
        this.offsets = [];
    }
    PlaybackPosition.prototype.parseLabel = function (name, offset) {
        var _a = this, offsets = _a.offsets, labels = _a.labels;
        var i = labels.indexOf(name);
        if (typeof name === 'string' &&
            name.indexOf('=') !== -1 &&
            !offset &&
            i === -1) {
            var rty = name.substr(name.indexOf('=') - 1, 2);
            var rt = name.split(rty);
            offset = rt.length === 2 ? rty + rt[1] : null;
            name = rt[0];
            i = labels.indexOf(name);
        }
        if (i !== -1 && name) {
            var currOffset = offsets[i] || 0;
            if (typeof offset === 'number') {
                currOffset = offset;
            }
            else if (typeof offset === 'string') {
                if (offset.indexOf('=') !== -1) {
                    var type = offset.charAt(0);
                    offset = Number(offset.substr(2));
                    if (type === '+' || type === '-') {
                        currOffset += parseFloat(type + offset);
                    }
                    else if (type === '*') {
                        currOffset *= offset;
                    }
                    else if (type === '/') {
                        currOffset /= offset;
                    }
                    else if (type === '%') {
                        currOffset *= offset / 100;
                    }
                }
            }
            return currOffset;
        }
        return typeof offset === 'number' ? offset : 0;
    };
    PlaybackPosition.prototype.addLabel = function (name, offset) {
        this.labels.push(name);
        this.offsets.push(this.parseLabel(name, offset));
        return this;
    };
    PlaybackPosition.prototype.setLabel = function (name, offset) {
        var i = this.labels.indexOf(name);
        if (i !== -1) {
            this.offsets.splice(i, 1, this.parseLabel(name, offset));
        }
        return this;
    };
    PlaybackPosition.prototype.eraseLabel = function (name) {
        var i = this.labels.indexOf(name);
        if (i !== -1) {
            this.labels.splice(i, 1);
            this.offsets.splice(i, 1);
        }
        return this;
    };
    return PlaybackPosition;
}());
export default PlaybackPosition;
