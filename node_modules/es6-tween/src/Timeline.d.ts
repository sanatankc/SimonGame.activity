import Tween from './Tween';
export declare const shuffle: (a: any) => any;
/**
 * Timeline main constructor.
 *
 * It works same as `Tween` instance, using `.repeat`, `.restart` or `etc` works like a `Tween`, so please see `Tween` class for methods
 * @constructor
 * @class
 * @namespace TWEEN.Timeline
 * @param {Object=} params Default params for new tweens
 * @example let tl = new Timeline({delay:200})
 * @extends Tween
 * @deprecated
 */
declare class Timeline extends Tween {
    _duration: number;
    _isFinite: boolean;
    _isPlaying: boolean;
    _reversed: boolean;
    _id: number;
    private _defaultParams;
    private _tweens;
    private position;
    constructor(params: Object);
    mapTotal(fn: any): this;
    timingOrder(fn: any): this;
    getTiming(mode: any, nodes: any, params: any, offset?: number): any;
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} from - Initial value
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example tl.fromTo(nodes, {x:0}, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    fromTo(nodes: any, from: any, to: any, params: any): this;
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} from - Initial value
     * @param {object} params - Options of tweens
     * @example tl.from(nodes, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    from(nodes: any, from: any, params: any): this;
    /**
     * @param {Array<Element>} nodes DOM Elements Collection (converted to Array)
     * @param {object} to - Target value
     * @param {object} params - Options of tweens
     * @example tl.to(nodes, {x:200}, {duration:1000, stagger:200})
     * @memberof Timeline
     * @static
     */
    to(nodes: any, to: any, params: any): this;
    /**
     * Add label to Timeline
     * @param {string} name Label name
     * @param {any} offset Label value, can be `number` and/or `string`
     * @example tl.add('label1', 200)
     * @memberof Timeline
     */
    addLabel(name: any, offset: any): this;
    map(fn: any): this;
    /**
     * Add tween to Timeline
     * @param {Tween} tween Tween instance
     * @param {position} position Can be label name, number or relative number to label
     * @example tl.add(new Tween(node, {x:0}).to({x:200}, 200))
     * @memberof Timeline
     */
    add(tween: any, position: any): this;
    restart(): this;
    easing(easing: any): this;
    interpolation(interpolation: any): this;
    update(time: any): boolean;
    progress(value: any): number | boolean;
}
export default Timeline;
